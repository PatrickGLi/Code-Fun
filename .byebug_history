quit
display current_y_index
display current_x_index
c
diagonal
c
matrix[1][2]
display current_y_index
display current_x_index
c
display current_swap
display word
quit
c
display current_swap
display word
quit
c
display current_swap
c
display word
quit
c
display word
c
quit
c
display word
quit
c
cc
c
display word
quit
word
results
c
display word
c
display word
c
display current_swap
display no_current_swap
quit
leadTime.dup
leadTime
display leftover_lead_times
display leftover_orders
display leftover_shoppers
quit
times
shoppers
display shoppers.dup.delete(times)
c
orders
c
orders
c
quit
c
display convertTime(times[1])
display converted_order_time
display convertTime(times[0])
quit
quiot
times
times[0]
display convertTime(times[0])
display converted_order_time
quit
c
quit
c
display queue
display new_location
quit
c
display new_location
display queue
quit
c
display new_location
quit
c
display new_location
quit
c
display queue
c
display queue
quit
new_location
c
new_location
c
new_location
quit
new_location
c
quit
last_location[:previous]
last_location
c
quit
last_location[:location][0]
last_location[:location]
last_location
quit
last_location
c
quit
last_location
c
last_location
c
quit
last_location
c
quit
last_location
current
c
quit
current
quit
last_location
current
c
quit
current
quit
new_location
quit
c
new_location[:previous].keys.include?(new_location[:location])
new_location[:previous].keys
new_location[:previous][[1,0]]
new_location[:previous]
x  = new_location[:location]
new_location[:previous][new_location[:location]]
new_location[:location]
new_location[:previous]
new_lcation[:previous]
quit
c
quit
new_location[:previous].include?(new_location[:location])
new_location[:previous]
new_location
quit
c
-1.between?(0, 3)
0.between?(0, 3)
grid[0].count
grid[0]
grid
display coordinate[0]
display coordinate
quit
display coordinate
c
quit
display parkingLot
c
display idx_2
display idx_1
c
display idx_2
display idx_1
display luckySpot
c
display luckySpot
display idx_2
display idx_1
c
display idx_2
display idx_1
c
display parkingLot[idx_1][idx_2]
c
quit
c
display luckySpot
c
display coordinates
c
display result
result
c
parkingLot[0]
coordinates[2]
result
display coordinates
c
display result
c
display coordinates
display coordiantes
display result
c
display luckySpot
c
display result
display result'
display result
c
display coordinates
c
display coordinates
c
coordinates
display result
c
display result
c
display result
c
display result
c
quit
c
display result
quit
display idx_2
display idx_1
c
display parkingLot[idx_1][idx_2]
c
parkingLot[idx_1][idx_2]
c
luckySpot
outOfBounds?(parkingLot, luckySpot)
outOfCounts?(parkingLot, luckySpot)
c
quit
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
quit
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
