c
quit
display parkingLot
c
display idx_2
display idx_1
c
display idx_2
display idx_1
display luckySpot
c
display luckySpot
display idx_2
display idx_1
c
display idx_2
display idx_1
c
display parkingLot[idx_1][idx_2]
c
quit
c
display luckySpot
c
display coordinates
c
display result
result
c
parkingLot[0]
coordinates[2]
result
display coordinates
c
display result
c
display coordinates
display coordiantes
display result
c
display luckySpot
c
display result
display result'
display result
c
display coordinates
c
display coordinates
c
coordinates
display result
c
display result
c
display result
c
display result
c
quit
c
display result
quit
display idx_2
display idx_1
c
display parkingLot[idx_1][idx_2]
c
parkingLot[idx_1][idx_2]
c
luckySpot
outOfBounds?(parkingLot, luckySpot)
outOfCounts?(parkingLot, luckySpot)
c
quit
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
quit
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display parkingLot[idx_1][idx_2]
display idx_2
display idx_1
idx_1
c
validSpot?(parkingLot, luckySpot)
luckySpot
parkingLot
c
quit
combined_code1.gsub(/(?=.*#{word_1}(?!bar))/, word_2)
combined_code1.gsub(/#{word_1}/, word_2)
combined_code1.g
quit
combined_code1.gsub(/(?![a-z])#{word_1}/, word_2)
combined_code1.gsub(/#{word_1}/, word_2)
combined_code1
combined_code1.gsub(word_1, word_2)
combined_code1.gsub(word_1, word2)
combined_code1
word_1
combined_code1
quit
combined_code1
c
display combined_code1
c
combined_code1
word_2
word_1
quit
c
display sentence
c
quit
c
display sentence[26]
c
display sentence[end_of_word]
display end_of_word
display index
c
display index
c
quit
qui
c
display end_of_word
display start_of_word
display index
display sentence
c
quit
display sentence
c
display sentence[end_of_word]
display end_of_word
display start_of_word
c
display word_1
c
quit
c
start_of_word
c
replaced_words
quit
replaced_words
quit
replaced_words
quit
y
quit
replaced_words.any? { |k, v| quit
replaced_words
quit
combined_code1
word_2
word_1
c
display i
c
display combined_code2
display combined_code1
quit
c
display sentence
c
index
sentence
c
c\
c
sentence
quit
index
sentence
c
line.split(" ")[0][0]
line.split(" ")[0]
line.split(" ")
line
c
line
c
display index_to_replace
display replaced_line_index
c
display replaced_line_index
display index_to_replace
c
display replaced_line_index
display index_to_replace
c
display replaced_line_index
c
n
display index_to_replace
next_line_challenge_id[0]
n
display next_line_challenge_id
n
c
display source[index + 1]
c
source[index + 1]
index + 1
index
line
c
display string2
display string1
display string2[pointer2]
display string1[pointer1]
c
quit
reload!
display words
c
display words
display words[median]
c
display words[median]
display words
display median
c
display median
display words
c
quit
words[median] <=> words[0]
words[median]
words[1]
c
words[0]
words[median]
display words
display median
c
n
