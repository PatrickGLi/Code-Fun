quit
new_location
c
new_location
c
new_location
quit
new_location
c
quit
last_location[:previous]
last_location
c
quit
last_location[:location][0]
last_location[:location]
last_location
quit
last_location
c
quit
last_location
c
last_location
c
quit
last_location
c
quit
last_location
current
c
quit
current
quit
last_location
current
c
quit
current
quit
new_location
quit
c
new_location[:previous].keys.include?(new_location[:location])
new_location[:previous].keys
new_location[:previous][[1,0]]
new_location[:previous]
x  = new_location[:location]
new_location[:previous][new_location[:location]]
new_location[:location]
new_location[:previous]
new_lcation[:previous]
quit
c
quit
new_location[:previous].include?(new_location[:location])
new_location[:previous]
new_location
quit
c
-1.between?(0, 3)
0.between?(0, 3)
grid[0].count
grid[0]
grid
display coordinate[0]
display coordinate
quit
display coordinate
c
quit
display parkingLot
c
display idx_2
display idx_1
c
display idx_2
display idx_1
display luckySpot
c
display luckySpot
display idx_2
display idx_1
c
display idx_2
display idx_1
c
display parkingLot[idx_1][idx_2]
c
quit
c
display luckySpot
c
display coordinates
c
display result
result
c
parkingLot[0]
coordinates[2]
result
display coordinates
c
display result
c
display coordinates
display coordiantes
display result
c
display luckySpot
c
display result
display result'
display result
c
display coordinates
c
display coordinates
c
coordinates
display result
c
display result
c
display result
c
display result
c
quit
c
display result
quit
display idx_2
display idx_1
c
display parkingLot[idx_1][idx_2]
c
parkingLot[idx_1][idx_2]
c
luckySpot
outOfBounds?(parkingLot, luckySpot)
outOfCounts?(parkingLot, luckySpot)
c
quit
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
quit
display validSpot?(parkingLot, luckySpot)
display luckySpot
c
display luckySpot
display validSpot?(parkingLot, luckySpot)
c
display parkingLot[idx_1][idx_2]
display idx_2
display idx_1
idx_1
c
validSpot?(parkingLot, luckySpot)
luckySpot
parkingLot
c
quit
combined_code1.gsub(/(?=.*#{word_1}(?!bar))/, word_2)
combined_code1.gsub(/#{word_1}/, word_2)
combined_code1.g
quit
combined_code1.gsub(/(?![a-z])#{word_1}/, word_2)
combined_code1.gsub(/#{word_1}/, word_2)
combined_code1
combined_code1.gsub(word_1, word_2)
combined_code1.gsub(word_1, word2)
combined_code1
word_1
combined_code1
quit
combined_code1
c
display combined_code1
c
combined_code1
word_2
word_1
quit
c
display sentence
c
quit
c
display sentence[26]
c
display sentence[end_of_word]
display end_of_word
display index
c
display index
c
quit
qui
c
display end_of_word
display start_of_word
display index
display sentence
c
quit
display sentence
c
display sentence[end_of_word]
display end_of_word
display start_of_word
c
display word_1
c
quit
c
start_of_word
c
replaced_words
quit
replaced_words
quit
replaced_words
quit
y
quit
replaced_words.any? { |k, v| quit
replaced_words
quit
combined_code1
word_2
word_1
c
display i
c
display combined_code2
display combined_code1
quit
c
display sentence
c
index
sentence
